第2章　単一責任のクラスを設計する
2.1 クラスに属するものを決める
メソッドをグループに分けクラスにまとめる
    メソッドはクラス内に定義される
    クラスはソフトウェアで言う仮想の世界 クラス＝枠組み
    きちんとクラス分けをするが、初期段階は知識が足りなくて無理だな、変更はくわえられるものだ
変更が簡単なようにコードを組成する
    かんたんとは？TRUEなコードであること、単一の責任を持つこと
    Transparent 見通しが良い 副作用がない
    Reasonable  合理的       要件の変更が小さいならコードの修正も小さい
    Usable      利便性が高い 再利用性
    Exemplary   模範的       コードの変更をする人が↑の品質を自然と保ようになっている
2.2 単一の責任を持つクラスを作成する
アプリケーション例: 自転車とギア
    ギアクラスを作ってチェーン/コグでギア比を出すクラスを作った。
    友人の考案により車輪サイズも考慮したら、引数が増えて元々ギアクラスを呼び出してたところでエラーになっちゃった。
    これからも変更が加わるだろうからコードの変更が容易でなければならない。
なぜ単一責任が重要なのか
    複製はメンテナンス大変
    2つの責任は再利用し辛い
    目的の変更と違うところで影響出るしデグる可能性大
クラスが単一責任かどうかを見極める
    1文で説明できるもの 「または」はない
    「ギアクラスさん、あなたのギア比を教えてください」
    「ギアクラスさん、あなたの車輪サイズを教えてください」 これでは意味わからん
    単一責任の原則(SRP) 責任駆動設計(RDD)
    「ギアクラスさん、歯のある2つのスプロケット間の日を計算して下さい」 これはやり過ぎている
設計を決定すると気を見極める
    今の段階ではギアクラスさんをどうすることもできない。
    初期段階のプロジェクトの知識量はとても少ない。
    ギアクラスさんは複製されるべきでも再利用されるべきでもないが、その日が来ることがあるかもしれない。
    現時点での要件と未来の可能性の相互間のトレードオフを理解し、コストが最小になるように決断するのです。
2.3 変更を歓迎するコードを書く
データではなく、振る舞いに依存する
    DRY どんな振る舞いも一か所のみに存在すること
    DRYなコードは変更しやすい、１か所だけ変えればいいから
インスタンス変数の隠蔽
    インスタンス変数はアクセサメソッドで包み直接参照しないようにする。
    メソッドで包むとは？
    パブリックかプライベートでやるべきかは4章でやる
データ構造の隠蔽
    配列の[0]にタイヤのリアが入っている
    複雑な奴は自身からも？？見えないところに隠そう
あらゆる箇所を単一責任にする
    クラス以外でも使える概念
メソッドから余計な責任を抽出する
    メソッドも単一責任であるべき
    wheelsを繰り返し、それぞれの直径を計算している
     →配列を繰り返し処理するメソッドと1つの直径を出すメソッドに分ける
    1文で責任を説明しよう
    コメントが必要なくなる
    再利用できるようになる
    他のクラスへの移動が簡単
クラス内の余計な責任を隔離する
    余計なふるまいを消したい
    責任あり過ぎたら他のクラスとかに分離する
2.4 ついに、実際のWheelの完成
    ruby/2章ディレクトリで「reby test.rb」を実行、結果を見れる
2.5 まとめ