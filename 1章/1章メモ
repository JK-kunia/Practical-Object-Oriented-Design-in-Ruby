第1章 オブジェクト指向設計
1.1 設計の賞賛
設計が解決する問題
    生産性と楽しさをどちらも取り入れられる
    変更は絶対ある、それに対応する
変更が困難な理由
    依存関係を管理する
    依存関係がぐちゃぐちゃだと変更が困難になる
設計の実用的な定義
    設計とはアトリエ、芸術
    設計の目的は「あとにでも」設計をできるようにし、変更コストを削減すること
1.2 設計の道具
設計原則
    SOLIDなどの原則はどこから来た？
    研究者で定量的にデータを取って計測した
        この結果は信じても良いものだぞ、原則に従えば良いコードをかけるぞ
設計(デザイン)パターン
    デザインパターンが浸透のはよいが、初心者が間違ったパターンを適応して複雑になってるぞ
    この本を読んでパターンを適切に選べ
1.3 設計の行為
設計が失敗する原因
    設計を知らなくても作れてしまう、PHP,Rubyなど、誰でも動くものをつくれてしまう
    設計の知識が増えてきた頃が危険、なんでもかんでも新しい知識を使おうとするからな
    アジャイルはいいぞ、必要な要件がなんなのかわかるには時間がかかる場合があるからな、設計を修正しやすいな
設計をいつ行うか
    顧客にはすぐ見せろ、何が欲しいのかわかってないからな
    最初から全体設計(BUFD)は無理よ、完成時期も予測できないよ
    納期が責任を生む、そしてプロジェクトは崩壊する
    BUFDは作る前から全体を詳細に定義しすぎるから厳しい
    オブジェクト指向設計は小さく小さく行う、アジャイルは変更ある前提で動く
    シンプル、柔軟性、適応性のあるコードを生み出せば成功する
設計を判断する
    書いたコードの総数(SLOC)昔の生産性の指標 品質は悪いよね
    どれだけオブジェクト指向かを測定してくれるメトリクスがある。バイアスはなく数字を出してくれる。
    妥協してると技術的負債、利子もつくぞ
    利益を生み出すような技術をこの本から学ぼう
1.4 オブジェクト指向プログラミングのかんたんな導入
手続き型言語
    非オブジェクト指向
    型があるな、どんな型なのか知ってるのはプログラマー自身だ
    一回送り出したら後何してるか分かんね、幼稚園に送り出した子供の様に
オブジェクト指向言語
    データとふるまいを1つのオブジェクトに持つ
    concatはRubyは持たない、文字列のオブジェクトが持つ
    クラス 似たようなオブジェクトの構造の設計図
    メソッド(振る舞い) 属性(変数の定義)
    インスタンス化 繰り返し生成して使われる
    固有のデータだけは違う
    文字列オブジェクトの設計図も「それ自体がオブジェクト」である
        Classクラスのオブジェクト Classクラスは新しいクラスを生成している